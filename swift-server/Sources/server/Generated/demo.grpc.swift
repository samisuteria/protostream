//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: demo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `DemoClient`, then call methods of this protocol to make API calls.
public protocol DemoClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: DemoClientInterceptorFactoryProtocol? { get }

  func connect(
    _ request: Connection,
    callOptions: CallOptions?,
    handler: @escaping (Message) -> Void
  ) -> ServerStreamingCall<Connection, Message>

  func update(
    _ request: Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Message, Empty>

  func disconnect(
    _ request: Connection,
    callOptions: CallOptions?
  ) -> UnaryCall<Connection, Empty>
}

extension DemoClientProtocol {
  public var serviceName: String {
    return "Demo"
  }

  /// Server streaming call to Connect
  ///
  /// - Parameters:
  ///   - request: Request to send to Connect.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func connect(
    _ request: Connection,
    callOptions: CallOptions? = nil,
    handler: @escaping (Message) -> Void
  ) -> ServerStreamingCall<Connection, Message> {
    return self.makeServerStreamingCall(
      path: "/Demo/Connect",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func update(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Message, Empty> {
    return self.makeUnaryCall(
      path: "/Demo/Update",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  /// Unary call to Disconnect
  ///
  /// - Parameters:
  ///   - request: Request to send to Disconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func disconnect(
    _ request: Connection,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Connection, Empty> {
    return self.makeUnaryCall(
      path: "/Demo/Disconnect",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectInterceptors() ?? []
    )
  }
}

public protocol DemoClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'connect'.
  func makeConnectInterceptors() -> [ClientInterceptor<Connection, Message>]

  /// - Returns: Interceptors to use when invoking 'update'.
  func makeUpdateInterceptors() -> [ClientInterceptor<Message, Empty>]

  /// - Returns: Interceptors to use when invoking 'disconnect'.
  func makeDisconnectInterceptors() -> [ClientInterceptor<Connection, Empty>]
}

public final class DemoClient: DemoClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: DemoClientInterceptorFactoryProtocol?

  /// Creates a client for the Demo service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DemoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol DemoProvider: CallHandlerProvider {
  var interceptors: DemoServerInterceptorFactoryProtocol? { get }

  func connect(request: Connection, context: StreamingResponseCallContext<Message>) -> EventLoopFuture<GRPCStatus>

  func update(request: Message, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>

  func disconnect(request: Connection, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>
}

extension DemoProvider {
  public var serviceName: Substring { return "Demo" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Connect":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Connection>(),
        responseSerializer: ProtobufSerializer<Message>(),
        interceptors: self.interceptors?.makeConnectInterceptors() ?? [],
        userFunction: self.connect(request:context:)
      )

    case "Update":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Message>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        userFunction: self.update(request:context:)
      )

    case "Disconnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Connection>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeDisconnectInterceptors() ?? [],
        userFunction: self.disconnect(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol DemoServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'connect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectInterceptors() -> [ServerInterceptor<Connection, Message>]

  /// - Returns: Interceptors to use when handling 'update'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateInterceptors() -> [ServerInterceptor<Message, Empty>]

  /// - Returns: Interceptors to use when handling 'disconnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisconnectInterceptors() -> [ServerInterceptor<Connection, Empty>]
}
